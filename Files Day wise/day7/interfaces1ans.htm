<html >
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Answers: Java Programmer Certification Mock Exam</title>
<meta content="noindex" name="robots">
<style>
<!--
#question {font-size: 125%;}
pre  {font: Arial}
#strong1 {font-weight: bold}
#bold {font-weight: bold}
#codeFragment {font-family: "Courier"}
#keyWord {font-family: "Courier"}
#identifier {font-family: "Courier"}
#type {font-family: "Courier"}
#literal {font-family: "Courier"}
#reservedWord {font-family: "Courier"}
#keyTerm {font-style: italic}
#codeFragmentBlock {font-family: "Courier"}
#commandLine {font-family: "Courier"}
#codeBlock {font-family: "Courier"}
#statement {font-family: "Courier"}
#expression {font-family: "Courier"}
#superScript {font-size: 65%}
#subScript {font-size: 65%}
#output {font-family: "Courier"}
-->
</style>
</head>
<body>
<h1 align="center">
<br>

</h1>
<p>
<h2 align="center">

</h2>
</p>
<div align="center">

</p>

<p>

</p>

</div>
<table border="1" width="100%">
<caption>Answers: Java Programmer Certification Mock Exam</caption>
<thead>
<tr>
<th>No.</th><th colspan="2">Answer</th><th>Remark</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">1</td><td align="center">c&nbsp;
d&nbsp;
</td><td><span id="answertext">3&nbsp;
</span><span id="answertext">4&nbsp;
</span></td><td><span id="remark">
Methods declared within an interface are implicitly
<span id="keyWord">public</span>.
If no access modifier is included in the method
declaration; then, the declaration is implicitly
<span id="keyWord">public</span>.
An attempt to declare the method using a weaker access privilege,
<span id="keyWord">private</span>
or
<span id="keyWord">protected</span>,
results in a 
compile-time error.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">2</td><td align="center">d&nbsp;
</td><td><span id="answertext">If an interface is named in the implements clause of a class, then the class must implement all of the methods declared within the interface.&nbsp;
</span></td><td><span id="remark">
This question asks which answer option is 
<span id="bold">not</span> true.  
Some true statements are as follows.
An interface can be declared within an enclosing class or
interface.  The members of an interface can be constants,
abstract method declarations, class declarations or
interface declarations. 
If an interface is named in the implements clause of a class, 
then the class must implement all of the methods declared
within the interface or the class must be declared abstract.
The untrue answer option did not mention that an abstract class
is not required to implement any of the methods declared in an
interface that is named in the implements clause of the class declaration.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">3</td><td align="center">a&nbsp;
e&nbsp;
</td><td><span id="answertext">An interface declaration can be a member of an interface.&nbsp;
</span><span id="answertext">An abstract method declaration can be a member of an interface.&nbsp;
</span></td><td><span id="remark">
An interface can be declared within an enclosing class or
interface.  The members of an interface can be constants,
abstract method declarations, class declarations, or
interface declarations.  The body of a method declared
within an interface is a semicolon.
An interface can extend another interface, but can not
implement an interface.  An 
<span id="keyWord">abstract</span>
class that has an
interface, 
<span id="identifier">I1</span>,
in its 
<span id="keyWord">implements</span> 
clause 
is not required to implement any of the methods declared within
<span id="identifier">I1</span>.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">4</td><td align="center">a&nbsp;
f&nbsp;
</td><td><span id="answertext">abstract&nbsp;
</span><span id="answertext">public&nbsp;
</span></td><td><span id="remark">
All interfaces are implicitly 
<span id="keyWord">abstract</span>.  
The explicit application of the 
<span id="keyWord">abstract</span>
modifier to an interface declaration is redundant and is strongly discouraged.
The declaration of an interface within the body of an enclosing
class or interface is called a
<span id="keyTerm">member type declaration</span>.
Every member type declaration appearing within the body of a
directly enclosing interface is implicitly
<span id="keyWord">static</span>
and
<span id="keyWord">public</span>.
Use of the access modifiers,
<span id="keyWord">private</span> 
or
<span id="keyWord">protected</span>,
is contradictory and results in a 
compile-time error.
In contrast, the modifiers,
<span id="keyWord">private</span> 
and
<span id="keyWord">protected</span>,
are applicable to a member type declaration appearing within the
body of a directly enclosing class.
The modifier,
<span id="keyWord">final</span>,
is never applicable to an interface.
The keyword,
<span id="keyWord">implements</span>,
is not a modifier. 
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">5</td><td align="center">a&nbsp;
d&nbsp;
e&nbsp;
f&nbsp;
</td><td><span id="answertext">abstract&nbsp;
</span><span id="answertext">private&nbsp;
</span><span id="answertext">protected&nbsp;
</span><span id="answertext">public&nbsp;
</span></td><td><span id="remark">
All interfaces are implicitly abstract.  The
explicit application of the modifier,
<span id="keyWord">abstract</span>,
to an interface is redundant and is strongly discouraged.
The declaration of an interface within the body of an enclosing
class or interface is called a
<span id="keyTerm">member type declaration</span>.
The 
<span id="keyWord">private</span>,
<span id="keyWord">protected</span>
and 
<span id="keyWord">static</span>
modifiers are applicable to a member type declaration
that appears in the body of a directly enclosing class.
In contrast, the modifiers,
<span id="keyWord">private</span> 
and
<span id="keyWord">protected</span>,
are not applicable to a member type declaration appearing within the
body of a directly enclosing interface.
The modifier,
<span id="keyWord">final</span>,
is never applicable to an interface.
The keyword,
<span id="keyWord">extends</span>,
is not a modifier. 
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">6</td><td align="center">a&nbsp;
</td><td><span id="answertext">static&nbsp;
</span></td><td><span id="remark">
A member interface is  always implicitly 
<span id="keyWord">static</span>.
The modifier,
<span id="keyWord">static</span>,
can not be applied to an interface that
is not a member interface.
The modifier,
<span id="keyWord">synchronized</span>,
is applicable to a
concrete implementation of a method,
but is not applicable to any interface.
The modifiers,
<span id="keyWord">volatile</span>
and 
<span id="keyWord">transient</span>,
are only applicable to variables that are members
of a class.
The keyword,
<span id="keyWord">implements</span>,
is not a modifier. 
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">7</td><td align="center">a&nbsp;
e&nbsp;
</td><td><span id="answertext">abstract&nbsp;
</span><span id="answertext">public&nbsp;
</span></td><td><span id="remark">
The modifier,
<span id="keyWord">abstract</span>,
is applicable to an interface declaration,
but its use is strongly discouraged; because every
interface is implicitly
<span id="keyWord">abstract</span>.
An interface can not be 
<span id="keyWord">final</span>.
The modifiers,
<span id="keyWord">private</span>
and
<span id="keyWord">protected</span>,
are applicable only to an interface declaration
that is a member of a directly enclosing class declaration.
If an interface is not a member of a directly enclosing class,
or if the interface is a member of a directly enclosing interface;
then, the modifiers,
<span id="keyWord">private</span>
and
<span id="keyWord">protected</span>,
are not applicable.
If an interface is declare 
<span id="keyWord">public</span>,
then the compiler will 
generate an error if the class is not stored in a file
that has the same name as the interface plus the extension .java.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">8</td><td align="center">a&nbsp;
b&nbsp;
</td><td><span id="answertext">abstract&nbsp;
</span><span id="answertext">public&nbsp;
</span></td><td><span id="remark">
The modifier,
<span id="keyWord">abstract</span>,
is applicable to an interface declaration,
but its use is strongly discouraged; because every
interface is implicitly
<span id="keyWord">abstract</span>.

If an interface is declare 
<span id="keyWord">public</span>,
then the compiler will 
generate an error if the class is not stored in a file
that has the same name as the interface plus the extension .java.


The modifier,
<span id="keyWord">static</span>,
is applicable to a member interface,
but not to an interface that is not nested.
The modifier,
<span id="keyWord">synchronized</span>,
is applicable only to
concrete implementations of methods.
The modifiers,
<span id="keyWord">transient</span>
and 
<span id="keyWord">volatile</span>,
are applicable
only to variables.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">9</td><td align="center">c&nbsp;
f&nbsp;
</td><td><span id="answertext">final&nbsp;
</span><span id="answertext">public&nbsp;
</span></td><td><span id="remark">
The modifier,
<span id="keyWord">abstract</span>,
is not applicable to a variable.
All field declarations within an interface are implicitly 
<span id="keyWord">public</span>,
<span id="keyWord">static</span> 
and
<span id="keyWord">final</span>. 
Use of those modifiers is redundant but legal.
Although 
<span id="keyWord">const</span>
is a Java keyword, it is not
currently used by the Java programming language.
An interface member can never be 
<span id="keyWord">private</span>
or 
<span id="keyWord">protected</span>.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">10</td><td align="center">a&nbsp;
</td><td><span id="answertext">static&nbsp;
</span></td><td><span id="remark">
All field declarations within an interface are implicitly 
<span id="keyWord">public</span>,
<span id="keyWord">static</span> 
and 
<span id="keyWord">final</span>. 
Use of these modifiers is redundant but legal.
A field that is declared
<span id="keyWord">final</span> 
can not also be declared 
<span id="keyWord">volatile</span>;
so a field of an interface can not be declared
<span id="keyWord">volatile</span>.
The modifier,
<span id="keyWord">synchronized</span>,
is never applicable to a field. 
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">11</td><td align="center">a&nbsp;
d&nbsp;
e&nbsp;
f&nbsp;
</td><td><span id="answertext">public&nbsp;
</span><span id="answertext">abstract&nbsp;
</span><span id="answertext">static&nbsp;
</span><span id="answertext">final&nbsp;
</span></td><td><span id="remark">
A class that is declared within an enclosing interface is implicitly 
<span id="keyWord">public</span>
and 
<span id="keyWord">static</span>;
so the access modifiers,
<span id="keyWord">protected</span>
and 
<span id="keyWord">private</span>, 
are not applicable.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">12</td><td align="center">e&nbsp;
</td><td><span id="answertext">None of the above&nbsp;
</span></td><td><span id="remark">
All field declarations within an interface are
implicitly 
<span id="keyWord">public</span>,
<span id="keyWord">static</span>
and 
<span id="keyWord">final</span>.
Use of these modifiers is redundant but legal.  No other
modifiers can be applied to a field 
declaration within an interface.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">13</td><td align="center">e&nbsp;
</td><td><span id="answertext">5&nbsp;
</span></td><td><span id="remark">
All field declarations within an interface are
implicitly 
<span id="keyWord">public</span>,
<span id="keyWord">static</span>
and 
<span id="keyWord">final</span>.
Use of these
modifiers is redundant but legal.  No other
modifiers can be applied to a field 
declaration within an interface.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">14</td><td align="center">a&nbsp;
e&nbsp;
</td><td><span id="answertext">abstract&nbsp;
</span><span id="answertext">public&nbsp;
</span></td><td><span id="remark">
All methods declared within an interface are implicitly
<span id="keyWord">abstract</span>
and 
<span id="keyWord">public</span>. 
Although the
<span id="keyWord">abstract</span>
and
<span id="keyWord">public</span>
modifiers can legally be applied to a method
declaration in an interface, the usage is redundant
and is discouraged.
An 
<span id="keyWord">abstract</span>
method can not also be declared 
<span id="keyWord">private</span>,
<span id="keyWord">static</span>,
<span id="keyWord">final</span>,
<span id="keyWord">native</span>
or 
<span id="keyWord">synchronized</span>;
so the same
restriction applies to methods declared
within an interface.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">15</td><td align="center">f&nbsp;
</td><td><span id="answertext">None of the above&nbsp;
</span></td><td><span id="remark">
All methods declared within an interface are implicitly
<span id="keyWord">abstract</span>
and 
<span id="keyWord">public</span>.
Although the
<span id="keyWord">abstract</span>
and
<span id="keyWord">public </span>
modifiers can legally be applied to a method
declaration in an interface, the usage is redundant
and is discouraged.
An 
<span id="keyWord">abstract</span>
method can not also be
declared 
<span id="keyWord">private</span>,
<span id="keyWord">static</span>, 
<span id="keyWord">final</span>,
<span id="keyWord">native</span>
or
<span id="keyWord">synchronized</span>;
so the same
restriction applies to methods declared
within an interface. 
<span id="keyWord">Transient</span> 
and 
<span id="keyWord">volatile</span>
are not method modifiers.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">16</td><td align="center">c&nbsp;
d&nbsp;
e&nbsp;
</td><td><span id="answertext">3&nbsp;
</span><span id="answertext">4&nbsp;
</span><span id="answertext">5&nbsp;
</span></td><td><span id="remark">
Methods declared within an interface are implicitly
<span id="keyWord">public</span> 
even if the modifier,
<span id="keyWord">public</span>,
is omitted from the declaration.
Within the body of a class declaration,
an attempt to implement the method using a weaker access privilege,
<span id="keyWord">private</span>,
<span id="keyWord">protected</span>
or package access, results in a 
compile-time error.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">17</td><td align="center">c&nbsp;
d&nbsp;
</td><td><span id="answertext">3&nbsp;
</span><span id="answertext">4&nbsp;
</span></td><td><span id="remark">
All methods declared within an interface are implicitly
<span id="keyWord">abstract</span>
and
<span id="keyWord">public</span>.
Although the 
<span id="keyWord">abstract</span>
and 
<span id="keyWord">public</span> 
modifiers can legally be applied to a method
declaration in an interface, the usage is redundant
and is discouraged.
Since all methods declared within an interface are implicitly 
<span id="keyWord">public</span>,
a weaker access level can not be declared.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">18</td><td align="center">a&nbsp;
b&nbsp;
c&nbsp;
</td><td><span id="answertext">1&nbsp;
</span><span id="answertext">2&nbsp;
</span><span id="answertext">3&nbsp;
</span></td><td><span id="remark">
All methods declared within an interface are implicitly
<span id="keyWord">abstract</span>
and 
<span id="keyWord">public</span>. 
Although the 
<span id="keyWord">abstract</span>
and
<span id="keyWord">public</span>
modifiers can legally be applied to a method
declaration in an interface, the usage is redundant
and is discouraged.
The
<span id="keyWord">final</span>,
<span id="keyWord">synchronized</span>
and 
<span id="keyWord">native</span>
modifiers
can not appear in the declaration of an
<span id="keyWord">abstract</span> 
method, and can not be applied to an
<span id="keyWord">abstract</span>
method declared within an interface.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">19</td><td align="center">c&nbsp;
d&nbsp;
e&nbsp;
</td><td><span id="answertext">3&nbsp;
</span><span id="answertext">4&nbsp;
</span><span id="answertext">5&nbsp;
</span></td><td><span id="remark">
All methods declared within an interface are implicitly
<span id="keyWord">abstract</span>
and 
<span id="keyWord">public</span>.
Although the
<span id="keyWord">abstract</span>
and 
<span id="keyWord">public</span>
modifiers can legally be applied to a method
declaration in an interface, the usage is redundant
and is discouraged.
Since all methods declared within an interface are
implicitly 
<span id="keyWord">public</span>,
a weaker access level can not be declared.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">20</td><td align="center">a&nbsp;
</td><td><span id="answertext">1&nbsp;
</span></td><td><span id="remark">
All methods declared within an interface are implicitly 
<span id="keyWord">abstract</span>.
The 
<span id="keyWord">final</span>,
<span id="keyWord">synchronized</span>
and 
<span id="keyWord">native</span>
modifiers can not appear in the declaration of an
<span id="keyWord">abstract</span> 
method, and can not be applied to an 
<span id="keyWord">abstract</span>
method declared within an interface.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">21</td><td align="center">c&nbsp;
</td><td><span id="answertext">Compile-time error&nbsp;
</span></td><td><span id="remark">
In the declaration of interface 
<span id="identifier">B</span>,
the keyword, 
<span id="keyWord">extends</span>,
has been replaced by the keyword, 
<span id="keyWord">implements</span>.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">22</td><td align="center">c&nbsp;
</td><td><span id="answertext">Compile-time error&nbsp;
</span></td><td><span id="remark">
Fields declared within an interface are implicitly 
<span id="keyWord">public</span>,
<span id="keyWord">final</span>,
and 
<span id="keyWord">static</span>.
A 
compile-time error is
generated in response to the attempt to 
increment the value of
<span id="identifier">i</span>.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">23</td><td align="center">b&nbsp;
</td><td><span id="answertext">2&nbsp;
</span></td><td><span id="remark">
All methods declared within an interface are implicitly
<span id="keyWord">abstract</span>
and 
<span id="keyWord">public</span>.
Although the
<span id="keyWord">abstract</span>
and
<span id="keyWord">public</span> 
modifiers can legally be applied to a method
declaration in an interface, the usage is redundant
and is discouraged.
Methods declared within an interface are implicitly
<span id="keyWord">public</span> 
even if the modifier,
<span id="keyWord">public</span>,
is omitted from the declaration.
Within the body of a class declaration,
an attempt to implement the method using a weaker access privilege,
<span id="keyWord">private</span>,
<span id="keyWord">protected</span>
or package access, results in a 
compile-time error.
An 
<span id="keyWord">abstract</span> 
class that implements an interface is free
to override any of the inherited method declarations with another
<span id="keyWord">abstract</span>
method declaration.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">24</td><td align="center">e&nbsp;
</td><td><span id="answertext">None of the above&nbsp;
</span></td><td><span id="remark">
All methods declared within an interface are implicitly
<span id="keyWord">abstract</span>
and
<span id="keyWord">public</span>. 
Although the 
<span id="keyWord">abstract</span>
and
<span id="keyWord">public</span> 
modifiers can legally be applied to a method
declaration within an interface, the usage is redundant
and is discouraged.
The modifiers,
<span id="keyWord">final</span>,
<span id="keyWord">synchronized</span>
and 
<span id="keyWord">native</span>,
can not appear in the declaration of an 
<span id="keyWord">abstract</span> 
method, but they can be added to an implementation
of an 
<span id="keyWord">abstract</span>
method.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">25</td><td align="center">h&nbsp;
</td><td><span id="answertext">Compile-time error at line 4&nbsp;
</span></td><td><span id="remark">
Class 
<span id="identifier">C10</span>
inherits ambiguous declarations of the 
<span id="identifier">name</span>
field.
As long as the field is not referenced as a member of class
<span id="identifier">C10</span>;
then, no 
compile-time error
occurs. Line 4 generates the
compile-time error,
because it is the first to access the
<span id="identifier">name</span>
field as a member of class 
<span id="identifier">C10</span>.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">26</td><td align="center">b&nbsp;
</td><td><span id="answertext">Prints: I10.s10,I20.s20,I20&nbsp;
</span></td><td><span id="remark">
Class
<span id="identifier">C20</span> 
inherits ambiguous declarations of the 
<span id="identifier">name</span>
field.  As long as the field is not referenced as a member of class
<span id="identifier">C20</span>;
then, no
compile-time error
occurs.
Although line 4 may appear to generate the
compile-time error
it does not, because
<span id="identifier">name</span> 
is accessed directly as a member of interface 
<span id="identifier">I20</span>.
Therefore, the compiler does not encounter an ambiguity.
&nbsp;
</span></td>
</tr>
</tbody>
</table>
<table width="100%" border="0" cellpadding="2" cellspacing="0">
<tbody align="left">
<tr>
<td>&nbsp;</td>
</tr>
<tr>
<td title="Get your questions answered here"><b>Ask a Question</b></td>
</tr>
<tr>
<td><a href="mailto:">Send an email to me.</a></td>
</tr>
<tr>
<td>&nbsp;</td>
</tr>
<tr>
<td title="Get your questions answered here"><b>Java Question and Answer Forums</b></td>
</tr>
<tr>
<td align="left"><a title="Get your questions answered here" target="_blank" href="http://saloon.javaranch.com/">JavaRanch Big Moose Saloon</a></td>
</tr>
<tr>
<td align="left"><a title="Get your questions answered here" target="_blank" href="http://www.jchq.net/discus/">Marcus Green's Discussion Forum</a></td>
</tr>
<tr>
<td align="left"><a title="Get your questions answered here" target="_blank" href="http://developer.java.sun.com/developer/community/">java.sun.com Forums, Chat and User Groups</a></td>
</tr>
<tr>
<td>&nbsp;</td>
</tr>
<tr>
<td title="Useful reference material."><b>Other Resources</b></td>
</tr>
<tr>
<td align="left"><a title="Look up the answer yourself here" target="_blank" href="http://java.sun.com/docs/books/jls/second_edition/html/j.title.doc.html">Java Language Specification</a></td>
</tr>
<tr>
<td align="left"><a title="Look up the answer yourself here" target="_blank" href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/VMSpecTOC.doc.html">Java Virtual Machine Specification</a></td>
</tr>
<tr>
<td align="left"><a title="Look up JavaDocs here" target="_blank" href="http://java.sun.com/j2se/1.4/docs/api/">Java 2 Platform, Standard Edition, v 1.4.0 API Specification</a></td>
</tr>
<tr>
<td>&nbsp;</td>
</tr>
<tr>
<td><b>Tutorials</b></td>
</tr>
<tr>
<td align="left"><a title="Sun's Java Language Tutorial" target="_blank" href="http://java.sun.com/docs/books/tutorial/java/index.html">Learning the Java Language</a></td>
</tr>
<tr>
<td align="left"><a title="Sun's Java Language Tutorial with an Operator Precedence Chart" target="_blank" href="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/expressions.html">Operator Precedence Chart, Expressions, Statements, Blocks</a></td>
</tr>
<tr>
<td align="left"><a title="Assertions Tutorial" target="_blank" href="http://java.sun.com/j2se/1.4/docs/guide/lang/assert.html">Programming with Assertions</a></td>
</tr>
<tr>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<hr>
<center>
<font size="-1"><em>
    Copyright &copy; 2002-2004, <br>
    All rights reserved.
  </em></font>
</center>
</body>
</html>
<!-- text below generated by server. PLEASE REMOVE --><!-- Counter/Statistics data collection code --><script language="JavaScript" src="http://hostingprod.com/js_source/geov2.js"></script><script language="javascript">geovisit();</script><noscript><img src="http://visit.webhosting.yahoo.com/visit.gif?us1139304458" alt="setstats" border="0" width="1" height="1"></noscript>
<IMG SRC="http://geo.yahoo.com/serv?s=76001404&t=1139304458" ALT=1 WIDTH=1 HEIGHT=1>
